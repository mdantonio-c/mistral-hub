name: Backend

env:
  PROJECT: mistral

on:
  push:
  # schedule:
  #   - cron: "0 4 * * *"
  workflow_dispatch:

jobs:
  Development-mode:
    runs-on: ubuntu-20.04
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - uses: rapydo/actions/install@v1
        with:
          project: ${PROJECT}
          # extra_options: "-e FRONTEND_FRAMEWORK=nofrontend"

      - name: Install backend and datasets
        uses: ./.github/actions/setup-backend-and-datasets
        with:
          project: ${PROJECT}
          dataset_url: ${{ secrets.DATASET_URL }}

      - name: Test arpaesimc tools
        run: |
          rapydo shell backend "bash /code/tests/custom/test_arpaesimc.sh"

      - name: Run Pytest
        run: |
          # wait few seconds to let the init process in docker-entrypoint to complete
          sleep 20
          rapydo shell backend 'restapi tests --wait --destroy'

          LOGURU_LEVEL=WARNING rapydo list services
          # This should fail if at least one container is in Exit status
          [[ ! $(LOGURU_LEVEL=WARNING rapydo list services | grep -E "Exit|Restarting|Created") ]]

      - name: Coverage
        uses: rapydo/actions/coverage@v1
        with:
          repository: projects/${PROJECT}
          project: ${PROJECT}
          step: backend

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Docker Push
        run: docker push meteohub/backend:${{ env.RAPYDO_VERSION }}

      - name: Print Logs
        if: failure()
        run: tail -100 data/logs/backend-server.log

      - name: Docker Logs
        if: failure()
        run: rapydo logs

  Production-mode:
    runs-on: ubuntu-20.04
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - uses: rapydo/actions/install@v1
        with:
          project: ${PROJECT}

      - name: Install backend and datasets
        uses: ./.github/actions/setup-backend-and-datasets
        with:
          project: ${PROJECT}
          dataset_url: ${{ secrets.DATASET_URL }}

      - name: Production mode
        run: |

          # Stack already started by setup-backend-and-datasets, also remove volumes
          rapydo remove --all

          rapydo --testing --prod -e FTP_USER=ftpuser init --force
          rapydo pull --quiet
          rapydo ssl --volatile
          rapydo start

          sleep 45
          rapydo logs
          curl --insecure -X GET --max-time 5 https://localhost/api/status | grep "Server is alive"
          rapydo logs proxy --tail 20
          rapydo logs backend --tail 20

          LOGURU_LEVEL=WARNING rapydo list services
          # This should fail if at least one container is in Exit status
          # Except for frontend that is expected to be exited in prod mode
          [[ ! $(LOGURU_LEVEL=WARNING rapydo list services | grep -v frontend | grep -E "Exit|Restarting|Created") ]]

      - name: Print Logs
        if: failure()
        run: tail -100 data/logs/backend-server.log

      - name: Docker Logs
        if: failure()
        run: rapydo logs
