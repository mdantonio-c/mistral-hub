name: Backend

env:
  PROJECT: mistral

on:
  push:
  schedule:
    - cron: "0 5 * * *"

jobs:
  backend-tests:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - uses: rapydo/actions/install@v1
        with:
          project: ${PROJECT}

      - name: Install backend and datasets
        run: |

          wget --quiet ${{ secrets.DATASET_URL }}/arkimet.conf -O data/arkimet_conf/arkimet.conf;
          wget --quiet ${{ secrets.DATASET_URL }}/arkimet_summary.json -O data/arkimet_conf/arkimet_summary_filtered.json;
          wget --quiet ${{ secrets.DATASET_URL }}/dballe_summary_filtered.json -O data/arkimet_conf/dballe_summary_filtered.json;
          wget --quiet ${{ secrets.DATASET_URL }}/sample.bufr -O data/arkimet_conf/sample.bufr;
          wget --quiet ${{ secrets.DATASET_URL }}/arkimet.zip;
          unzip -q arkimet.zip -d data/;
          ls -l data/arkimet;
          ls -l data/arkimet_conf;

          rapydo pull;
          rapydo build --force;
          rapydo add task test_task;
          rapydo start;
          rapydo shell --no-tty backend 'restapi wait';

          echo "dbadb wipe --dsn=postgresql://\$ALCHEMY_USER:\$ALCHEMY_PASSWORD@\$ALCHEMY_HOST:\$ALCHEMY_PORT/DBALLE" > init.sh;
          echo "dbadb import --dsn=postgresql://\$ALCHEMY_USER:\$ALCHEMY_PASSWORD@\$ALCHEMY_HOST:\$ALCHEMY_PORT/DBALLE --type=bufr /arkimet/config/sample.bufr" >> init.sh;
          docker cp init.sh ${PROJECT}_backend_1:/tmp/init.sh;
          rapydo shell --no-tty backend 'bash /tmp/init.sh';

      - name: Run Pytest
        run: |
          rapydo shell --no-tty backend 'restapi tests --wait'
          docker cp ${PROJECT}_backend_1:/code/coverage.xml coverage.xml
          bash <(curl -s https://codecov.io/bash)

          rapydo remove
          rapydo volatile backend "bash /code/tests/custom/test_arpaesimc.sh"

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Docker Push
        run: docker push meteohub/backend:${{ env.RAPYDO_VERSION }}
