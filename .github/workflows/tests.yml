name: Test

on:
  push:
  schedule:
    - cron: "0 5 * * *"

jobs:
  build:
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        stage: [BACKEND, FRONTEND, CYPRESS]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install
        run: |
          python -m pip install --upgrade pip
          export RAPYDO_VERSION=0.9
          # Make the environment variable available to next steps
          echo "RAPYDO_VERSION=${RAPYDO_VERSION}" >> $GITHUB_ENV
          pip install --upgrade --no-cache-dir git+https://github.com/rapydo/do.git@${RAPYDO_VERSION}
          rapydo --testing init

      - name: Install backend and datasets
        if: ${{ matrix.stage == 'BACKEND' || matrix.stage == 'CYPRESS' }}
        run: |

          wget --quiet ${{ secrets.DATASET_URL }}/arkimet.conf -O data/arkimet_conf/arkimet.conf;
          wget --quiet ${{ secrets.DATASET_URL }}/arkimet_summary.json -O data/arkimet_conf/arkimet_summary.json;
          wget --quiet ${{ secrets.DATASET_URL }}/dballe_summary_filtered.json -O data/arkimet_conf/dballe_summary_filtered.json;
          wget --quiet ${{ secrets.DATASET_URL }}/sample.bufr -O data/arkimet_conf/sample.bufr;
          wget --quiet ${{ secrets.DATASET_URL }}/arkimet.zip;
          unzip -q arkimet.zip -d data/;
          ls data/arkimet;
          ls data/arkimet_conf;

          rapydo pull;
          rapydo build --force;
          rapydo add task test_task;
          rapydo start;
          rapydo shell --no-tty backend 'restapi wait';

          echo "dbadb wipe --dsn=postgresql://\$ALCHEMY_USER:\$ALCHEMY_PASSWORD@\$ALCHEMY_HOST:\$ALCHEMY_PORT/DBALLE" > init.sh;
          echo "dbadb import --dsn=postgresql://\$ALCHEMY_USER:\$ALCHEMY_PASSWORD@\$ALCHEMY_HOST:\$ALCHEMY_PORT/DBALLE --type=bufr /arkimet/config/sample.bufr" >> init.sh;
          docker cp init.sh mistral_backend_1:/tmp/init.sh;
          rapydo shell --no-tty backend 'bash /tmp/init.sh';

      - name: Run Pytest
        if: ${{ matrix.stage == 'BACKEND' }}
        run: |
          rapydo shell --no-tty backend 'restapi tests --wait'
          docker cp mistral_backend_1:/code/coverage.xml coverage.xml
          bash <(curl -s https://codecov.io/bash)

          rapydo remove
          rapydo volatile backend "bash /code/tests/custom/test_arpaesimc.sh"

      - name: Run Karma
        if: ${{ matrix.stage == 'FRONTEND' }}
        run: |
          rapydo -s frontend pull
          rapydo -s frontend start
          sleep 5
          rapydo -s frontend logs
          rapydo shell --no-tty frontend "yarn install"
          rapydo shell --no-tty frontend "reload-types"
          rapydo shell --no-tty frontend "yarn run test:single"
          cp data/mistral/karma/lcov.info .
          bash <(curl -s https://codecov.io/bash)

      - name: Run Cypress
        if: ${{ matrix.stage == 'CYPRESS' }}
        env:
          CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_PROJECT_ID }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
        run: |
          # Without this, envs will not be available to python... uhm... ugly!
          export CYPRESS_PROJECT_ID=${CYPRESS_PROJECT_ID}
          export CYPRESS_RECORD_KEY=${CYPRESS_RECORD_KEY}

          # Extra variables needed by Cypress
          export COMMIT_INFO_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
          export COMMIT_INFO_MESSAGE="$(git show -s --pretty=%B)"
          export COMMIT_INFO_SUBJECT="$(git show -s --pretty=%s)"
          export COMMIT_INFO_BODY="$(git show -s --pretty=%b)"
          export COMMIT_INFO_EMAIL="$(git show -s --pretty=%ae)"
          export COMMIT_INFO_AUTHOR="$(git show -s --pretty=%an)"
          export COMMIT_INFO_SHA="$(git show -s --pretty=%H)"
          export COMMIT_INFO_TIMESTAMP="$(git show -s --pretty=%ct)"
          export COMMIT_INFO_REMOTE="$(git config --get remote.origin.url)"
          export CYPRESS_GROUP="$(git show -s --pretty=%H)"

          sleep 20
          rapydo logs
          rapydo shell --no-tty backend --detach "restapi launch"
          rapydo -s frontend logs
          rapydo shell --no-tty frontend "yarn install"
          rapydo shell --no-tty frontend "reload-types"
          rapydo shell --no-tty frontend "yarn run cypress:start"

          cp data/prj/karma/lcov.info .
          bash <(curl -s https://codecov.io/bash)

      - name: Login to DockerHub
        if: ${{ matrix.stage == 'BACKEND' }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Docker Push
        if: ${{ matrix.stage == 'BACKEND' }}
        run: docker push rapydo/${{ matrix.service }}:${{ env.RAPYDO_VERSION }}
